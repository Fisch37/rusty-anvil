use std::io::Cursor;

use rusty_anvil::RegionFileReader;
use rusty_anvil::chunks::heightmaps::HeightmapType;

#[test]
fn base_heightmap_test() {
    let mut region = RegionFileReader::create(
        Cursor::new(&include_bytes!("data/complex-terrain.mca"))
    ).unwrap();
    let chunk = region.get_chunk(0, 5).unwrap();
    let heightmap = chunk.get_heightmap(HeightmapType::WorldSurface)
        .expect("No world surface heightmap");

    let res: Vec<_> = heightmap.into_iter().with_coordinates().collect();
    let expected_res: Vec<([u8; 2], u16)> = vec![([0,0], 198), ([1,0], 197), ([2,0], 197), ([3,0], 200), ([4,0], 200), ([5,0], 200), ([6,0], 194), ([7,0], 191), ([8,0], 192), ([9,0], 197), ([10,0], 197), ([11,0], 198), ([12,0], 197), ([13,0], 197), ([14,0], 187), ([15,0], 187), ([0,1], 198), ([1,1], 198), ([2,1], 200), ([3,1], 200), ([4,1], 203), ([5,1], 200), ([6,1], 200), ([7,1], 193), ([8,1], 191), ([9,1], 197), ([10,1], 198), ([11,1], 199), ([12,1], 198), ([13,1], 197), ([14,1], 188), ([15,1], 187), ([0,2], 199), ([1,2], 197), ([2,2], 200), ([3,2], 203), ([4,2], 204), ([5,2], 203), ([6,2], 200), ([7,2], 192), ([8,2], 191), ([9,2], 197), ([10,2], 197), ([11,2], 198), ([12,2], 197), ([13,2], 197), ([14,2], 188), ([15,2], 190), ([0,3], 199), ([1,3], 198), ([2,3], 200), ([3,3], 200), ([4,3], 203), ([5,3], 200), ([6,3], 200), ([7,3], 192), ([8,3], 191), ([9,3], 191), ([10,3], 197), ([11,3], 197), ([12,3], 197), ([13,3], 192), ([14,3], 192), ([15,3], 190), ([0,4], 199), ([1,4], 205), ([2,4], 205), ([3,4], 205), ([4,4], 200), ([5,4], 200), ([6,4], 195), ([7,4], 192), ([8,4], 191), ([9,4], 191), ([10,4], 192), ([11,4], 195), ([12,4], 195), ([13,4], 195), ([14,4], 192), ([15,4], 193), ([0,5], 205), ([1,5], 205), ([2,5], 206), ([3,5], 205), ([4,5], 205), ([5,5], 193), ([6,5], 193), ([7,5], 193), ([8,5], 193), ([9,5], 191), ([10,5], 192), ([11,5], 192), ([12,5], 195), ([13,5], 192), ([14,5], 192), ([15,5], 193), ([0,6], 205), ([1,6], 206), ([2,6], 207), ([3,6], 206), ([4,6], 205), ([5,6], 197), ([6,6], 194), ([7,6], 194), ([8,6], 191), ([9,6], 191), ([10,6], 191), ([11,6], 192), ([12,6], 192), ([13,6], 192), ([14,6], 190), ([15,6], 193), ([0,7], 205), ([1,7], 205), ([2,7], 206), ([3,7], 205), ([4,7], 205), ([5,7], 197), ([6,7], 196), ([7,7], 195), ([8,7], 191), ([9,7], 191), ([10,7], 191), ([11,7], 190), ([12,7], 197), ([13,7], 197), ([14,7], 197), ([15,7], 190), ([0,8], 200), ([1,8], 205), ([2,8], 205), ([3,8], 205), ([4,8], 199), ([5,8], 198), ([6,8], 197), ([7,8], 196), ([8,8], 194), ([9,8], 193), ([10,8], 191), ([11,8], 197), ([12,8], 197), ([13,8], 200), ([14,8], 197), ([15,8], 197), ([0,9], 200), ([1,9], 200), ([2,9], 199), ([3,9], 199), ([4,9], 199), ([5,9], 198), ([6,9], 197), ([7,9], 196), ([8,9], 194), ([9,9], 193), ([10,9], 191), ([11,9], 197), ([12,9], 200), ([13,9], 200), ([14,9], 200), ([15,9], 197), ([0,10], 201), ([1,10], 200), ([2,10], 200), ([3,10], 199), ([4,10], 199), ([5,10], 198), ([6,10], 197), ([7,10], 196), ([8,10], 194), ([9,10], 193), ([10,10], 191), ([11,10], 197), ([12,10], 197), ([13,10], 200), ([14,10], 197), ([15,10], 197), ([0,11], 202), ([1,11], 200), ([2,11], 200), ([3,11], 199), ([4,11], 199), ([5,11], 198), ([6,11], 197), ([7,11], 196), ([8,11], 195), ([9,11], 193), ([10,11], 191), ([11,11], 190), ([12,11], 197), ([13,11], 197), ([14,11], 197), ([15,11], 188), ([0,12], 202), ([1,12], 201), ([2,12], 200), ([3,12], 199), ([4,12], 199), ([5,12], 198), ([6,12], 198), ([7,12], 196), ([8,12], 195), ([9,12], 193), ([10,12], 191), ([11,12], 190), ([12,12], 190), ([13,12], 189), ([14,12], 189), ([15,12], 188), ([0,13], 204), ([1,13], 203), ([2,13], 201), ([3,13], 200), ([4,13], 199), ([5,13], 198), ([6,13], 198), ([7,13], 197), ([8,13], 195), ([9,13], 194), ([10,13], 192), ([11,13], 191), ([12,13], 190), ([13,13], 190), ([14,13], 189), ([15,13], 188), ([0,14], 205), ([1,14], 204), ([2,14], 202), ([3,14], 200), ([4,14], 199), ([5,14], 199), ([6,14], 198), ([7,14], 197), ([8,14], 196), ([9,14], 195), ([10,14], 193), ([11,14], 191), ([12,14], 191), ([13,14], 190), ([14,14], 190), ([15,14], 189), ([0,15], 206), ([1,15], 205), ([2,15], 203), ([3,15], 200), ([4,15], 199), ([5,15], 199), ([6,15], 198), ([7,15], 197), ([8,15], 196), ([9,15], 195), ([10,15], 194), ([11,15], 192), ([12,15], 191), ([13,15], 191), ([14,15], 190), ([15,15], 189)];
    assert_eq!(res.len(), 256);
    assert_eq!(res, expected_res, "Heightmap does not match expected results");
}